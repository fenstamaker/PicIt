package edu.montclair.hci.picit.camera;

import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.util.Arrays;

import edu.montclair.hci.picit.R;

import android.content.Context;
import android.graphics.*;
import android.hardware.Camera;
import android.util.AttributeSet;
import android.util.Log;
import android.view.*;
import android.widget.TextView;

// TODO: Auto-generated Javadoc
/**
 * 
 * OverlayView extends SurfaceView and hold the camera
 * preview image generated by android.camera.
 * 
 */
public class OverlayView extends SurfaceView {
	
	private final String TAG = "OverlayView";
	
	private SurfaceHolder overlayHolder;
	private Camera camera;
	private Camera.Size frameSize;
	private long sobelTime;
	private long drawTime;
	
	private NativeLib nativeLib;
	
	private IntBuffer nativeFrameSobel;

	/**
	 * Initializes the OverlayView. Called after being instantiated.
	 */
	public void init() {
		overlayHolder = getHolder();
		nativeLib = new NativeLib();
	}

	public OverlayView(Context context) {
		super(context);
		init();
	}
	
	public OverlayView(Context context, AttributeSet attrs) {
		super(context, attrs);
		init();
	}
	
	public OverlayView(Context context, AttributeSet attrs, int defStyle) {
		super(context, attrs, defStyle);
		init();
	}
	
	/**
	 * Sets the camera preview size. 
	 * 
	 * Must be called to set the frame buffers to the proper size.
	 *
	 * @param size The new preview size
	 */
	public void setPreviewSize(Camera.Size size) {
		frameSize = size;
		nativeFrameSobel = ByteBuffer.allocateDirect(frameSize.width*frameSize.height*4).asIntBuffer();
	}
	
	/**
	 * Sets the camera for the OverlayView.
	 * 
	 * Sets the previewCallback so the OverlayView can call the native Sobel edge detection.
	 *
	 * @param c the new camera
	 */
	public void setCamera(Camera c) {
		camera = c;
		camera.setPreviewCallback(previewCallback);
	}
	
	/**
	 * Removes the preview. 
	 * 
	 * Must be called when application quits or is paused to safely remove the preview. Errors 
	 * will be thrown is this method is not called.
	 */
	public void removePreview() {
		overlayHolder = null;
		nativeLib = null;
		nativeFrameSobel = null;
		camera.setPreviewCallback(null);
	}
	
	/**
	 * The camera preview callback object
	 */
	Camera.PreviewCallback previewCallback = new Camera.PreviewCallback() {
		
		/** (non-Javadoc)
		 * @see android.hardware.Camera.PreviewCallback#onPreviewFrame(byte[], android.hardware.Camera)
		 */
		public void onPreviewFrame(byte[] frame, Camera camera) {
			
			Canvas overlayCanvas = overlayHolder.lockCanvas(null);

			long timeSobel1 = System.currentTimeMillis();
			
			// Calls the native Sobel detection
			nativeLib.nativeSobel(frame, frameSize.width, frameSize.height, nativeFrameSobel);
			
			sobelTime = System.currentTimeMillis() - timeSobel1;
			
			long timeDraw1 = System.currentTimeMillis();
			
			Paint pt = new Paint();
			// Clears the canvas with a transparent color
			overlayCanvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR);
			
			// Set the overlay's height and width so that it is in line with the preview
			Rect dst = new Rect(0, 0, frameSize.width, frameSize.height);
			
			// Resets position to zero after being filled.
			nativeFrameSobel.position(0);
			// Draws the bitmap from the buffer
			Bitmap bmp = Bitmap.createBitmap(frameSize.width, frameSize.height, Bitmap.Config.ARGB_8888);
			bmp.copyPixelsFromBuffer(nativeFrameSobel);
			nativeFrameSobel.clear(); // Does not actually clear, just resets position to overwrite
			
			overlayCanvas.drawBitmap(bmp, null, dst, pt);
			
			drawTime = (System.currentTimeMillis() - timeDraw1);
			
			pt.setTextSize(16);
			pt.setColor(Color.BLACK);
			
			// Draws a black rectangle behind times so we can see them overtop the camera preview
			overlayCanvas.drawRect(overlayCanvas.getWidth()-215, overlayCanvas.getHeight()-125, overlayCanvas.getWidth(), overlayCanvas.getHeight(), pt);
			
			pt.setColor(Color.WHITE);
			
			Camera.Parameters params = camera.getParameters();
			int[] fpsRange = new int[2];
			params.getPreviewFpsRange(fpsRange);
			Camera.Size resolution = params.getPreviewSize();
			
			// Draws the Sobel timing, the draw time, the FPS, and the resolution of the image
			overlayCanvas.drawText("Sobel Time: " + Long.toString(sobelTime) + "ms", 
					overlayCanvas.getWidth()-200, overlayCanvas.getHeight()-100, pt);
			overlayCanvas.drawText("Draw Time : " + Long.toString(drawTime) + "ms", 
					overlayCanvas.getWidth()-200, overlayCanvas.getHeight()-80, pt);
			overlayCanvas.drawText("Camera FPS: " + Integer.toString(fpsRange[params.PREVIEW_FPS_MIN_INDEX]/1000) + "-" + Integer.toString(fpsRange[params.PREVIEW_FPS_MAX_INDEX]/1000),
					overlayCanvas.getWidth()-200, overlayCanvas.getHeight()-60, pt);
			overlayCanvas.drawText("Resolution: " + Integer.toString(resolution.width) + "x" + Integer.toString(resolution.height), 
					overlayCanvas.getWidth()-200, overlayCanvas.getHeight()-40, pt);
			
			// Unlocks the canvas and draws everything to screen
			overlayHolder.unlockCanvasAndPost(overlayCanvas);
			
		}
	};
	
}
